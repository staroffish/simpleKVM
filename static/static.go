// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package static generated by go-bindata.// sources:
// static/keyevent.js
// static/static.go
// static/template.html
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticKeyeventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\xdf\x6f\xdb\x46\x0c\xc7\xdf\xfd\x57\xb0\x7e\x48\x24\xb8\x90\xdc\x0d\xd8\x0f\x78\x42\xe0\x24\x1b\x36\xa4\x59\x8a\xda\x01\x32\xb4\xc5\x70\x95\x28\x4b\xf3\xe9\x4e\xbd\xe3\xd9\x16\x06\xff\xef\xc3\xc9\x92\x2c\x39\x56\xe6\xa1\x1b\x9a\xe5\x21\x71\xc4\xbb\x0f\xf9\xa5\x48\x9a\x2b\xa6\x20\xd5\x3f\xa5\x0a\x63\xb9\x81\x60\xff\xf9\x52\xc9\xb5\x46\xe5\xb8\x93\xc1\x20\x36\x22\xa4\x54\x0a\xb8\x52\xc8\x08\x1f\x6e\x5f\xff\x4c\x94\xbf\xc5\x4f\x06\x35\x39\x2e\xfc\x39\x00\x00\x48\x63\x70\xd6\xa9\x88\xe4\xda\x9b\x86\x94\xae\xf0\xe1\xee\xe3\x1f\x18\x52\x6d\xb7\x3f\x9b\x8c\xbf\xc5\x4f\x10\x80\xc0\x35\x74\x4e\x39\xc3\xdb\x34\x54\x52\xcb\x98\x3c\xeb\x60\x3e\x7f\x33\x74\x27\xe5\xc5\x6d\xf9\x1b\xb9\xc6\xb6\x8f\x6e\x14\xbd\x4e\x0e\x83\x6d\x23\x15\x92\x51\xa2\x3a\x3f\x19\x6c\xf7\x42\x43\xc6\x79\xc2\x44\xc4\xd1\xca\x83\x6d\x2b\x07\x3a\x91\x8a\x42\x43\x0e\x53\xca\x7a\x2d\x49\xb1\x54\xe0\x94\xb9\x84\x00\xc6\x13\x48\xe1\x07\x60\x4a\x79\x1c\xc5\x82\x92\x09\xa4\xa3\x51\x3b\xc2\x25\x16\xd7\x72\x2d\x2c\xe2\x5d\xfa\xa1\x13\x93\xef\xff\x13\x98\xef\xd7\xbc\xfb\xbc\x4b\xf3\x7d\xd8\x0e\xda\x71\xd7\x3e\x97\x58\xd4\xb7\xad\x8f\x4d\xc6\xed\x63\x9b\x23\x08\x7a\x5e\xf0\xa4\x39\xbd\xc4\x42\x98\x0c\x02\x08\xa5\x58\xa1\xa2\x1b\x2c\xae\x64\x84\x73\x59\x55\xcd\x8c\x98\x88\x98\x8a\x4a\x2f\x83\xea\x65\xd4\x7c\x4f\x0a\x85\x2c\x2a\x34\x31\xc2\x30\x61\x62\x81\x96\xd4\xa4\x7a\xf2\xf8\x42\x8e\xc2\x19\xbe\xb9\x9b\xcd\x87\x2f\x61\xe8\x2f\xb1\x88\xe4\x5a\x5c\x2c\xb1\xf8\x3d\x94\x11\x06\x43\x18\x55\x21\xbd\x04\x52\x06\xdd\xc7\x08\x8d\x22\xb2\x0a\x0e\x52\x71\x9f\xff\xcf\x13\x61\xf2\xcf\x4e\x83\x14\x37\x55\x4d\xe0\x91\x1e\xc6\x15\x0a\x72\x6d\x1d\xfd\xf2\x63\x69\xeb\x94\xef\x4e\x3c\x7a\xcb\x9d\xee\x63\x7d\x8a\xde\x3a\x49\xc3\xa4\x44\xfc\x8a\xa4\x43\x96\xa3\x5f\xa5\xc7\xbf\xcb\x51\xb1\x7e\x6c\x79\xb3\x82\x36\x81\xa1\x17\x92\xe2\x37\x58\x40\x10\x04\xa5\x50\x38\x3b\xdb\xc5\x00\x2f\x02\x38\xbf\x92\x82\x94\xe4\xe7\xc7\x3a\xed\xd5\xb7\xee\xf1\x18\x75\x92\xc6\xd4\xcf\x9c\x59\xf3\x71\xe2\x37\x3d\x44\xc6\x9f\xe0\x4d\x79\x0f\xed\xbb\x1e\x5a\x86\xc4\xfa\x71\x77\xb3\xf3\xee\x83\x5b\x24\x76\xd4\xc1\xf7\xaf\xdc\x76\x3e\x5b\xd3\x40\x98\xcc\x6d\x8f\xc3\x98\x71\x8d\x47\x2a\xe5\x3e\x7f\xde\x75\xb2\x1f\x84\xa7\x89\xca\xa4\xd1\x78\x2b\x57\xb8\x97\x55\xcd\x81\xd2\x72\xc2\x20\x68\x1f\x3d\xb9\xa7\x5b\x37\xba\x4d\x5d\x1a\x32\xb9\xc2\x8b\x4d\xd9\xd1\xe8\xc9\x38\xd6\x48\x0f\x30\x82\xe1\x59\xd1\x79\xf6\xdb\x61\xa3\xef\xa9\x75\xa7\x9f\x20\xbe\xdb\xfb\x5f\x5e\x7c\x39\xdc\x3f\x1a\x22\x29\x2a\xb5\xbb\x7f\xfe\x15\xb1\xed\xf2\xfd\xf2\x52\x4d\xfe\x9f\x09\x9d\x85\x4a\x72\xfe\x9c\xc4\xea\x32\xa2\x8b\xdd\x9f\x4a\x70\x84\x9c\xd8\x67\x97\x71\x77\x4f\xab\x17\x1f\x3b\x55\x36\x19\x4f\x4a\x0e\x31\x32\xda\xce\xc6\xaf\xc6\xe3\x83\xb5\x29\x94\x42\x4b\x8e\x1e\x97\x8b\xe6\xbc\x42\x9d\x4b\xa1\x71\x8e\x1b\xea\x5b\xa5\x1e\x2f\xc9\xad\x54\x1b\x66\x37\x4f\xb6\x4a\x17\x8c\xa4\xf2\x8c\x46\x35\x5d\xa0\x20\x8f\xe4\x6b\xb9\x46\x75\xc5\x34\x1e\x08\x33\xcc\xcb\x18\x85\x89\xe3\xc7\x3b\xee\x7b\xdf\x79\xf7\x3e\xf2\x3e\x8c\x5c\xdf\xb5\xa1\x0b\xc3\xf9\x81\xf0\xbf\x5f\x3b\xec\x08\x6c\x8d\xeb\x17\x4d\xd4\xed\xaf\x07\x6b\xa9\xe7\x69\x00\xe3\xcd\xe5\x75\xdb\xda\x99\xb6\xe3\xcd\xf4\xba\xb1\x6c\x9b\x4f\xcd\x1c\xef\x60\x2e\x9f\xc0\x7c\x7d\x3a\x66\xfa\x14\xe6\xf2\x00\xd3\x59\xea\x77\x07\x07\xdb\xbf\x02\x00\x00\xff\xff\x89\xc0\x41\xa9\xe1\x0c\x00\x00")

func staticKeyeventJsBytes() ([]byte, error) {
	return bindataRead(
		_staticKeyeventJs,
		"static/keyevent.js",
	)
}

func staticKeyeventJs() (*asset, error) {
	bytes, err := staticKeyeventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/keyevent.js", size: 3297, mode: os.FileMode(420), modTime: time.Unix(1607584468, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticStaticGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x8f\xdb\xc6\x15\x7e\x16\x7f\xc5\x64\x81\x04\x12\xe0\x4a\xbc\x0f\x69\x60\x81\x22\xb6\x0b\xb8\x45\x9d\xa2\xf1\x5b\x4f\x11\x0c\xc9\x33\x6b\x36\x2b\x71\x4b\x52\xce\x91\x03\xff\xf7\xe2\x9b\x33\xda\xec\x26\x8d\xfb\xd2\x07\x7b\xc5\xe1\xcc\xb9\x7c\x97\x33\x3c\x1c\xcc\xab\x69\x60\x73\xc7\x27\x9e\xdd\xca\x83\xe9\x2e\xe6\x6e\xfa\x43\x37\x9e\x06\xb7\xba\xbd\xd9\xfe\xf1\xf1\xd5\xce\xbc\xfe\xce\xbc\xfb\xee\xbd\x79\xf3\xfa\xed\xfb\x7d\x92\x1c\x0e\xe6\x6f\xae\xff\xd1\xdd\xb1\x59\x56\xb7\x8e\xfd\xef\x46\x39\x1c\xcc\x32\x9d\xe7\x9e\x97\x97\x38\xa5\xbb\x0f\x3f\xf2\x85\x3f\xf2\x69\xdd\xff\x6b\x79\xb2\xaa\x7f\xf6\x77\xd3\x93\xb5\x95\x8f\x0f\xf7\x6e\xe5\xfd\x87\xf5\x78\x9f\x3c\x3c\x4b\x9a\x24\xe3\xf1\x61\x9a\x57\xb3\x4d\x36\x37\xdd\x65\xe5\xe5\x26\xd9\xdc\xf4\xd3\xf1\x61\xe6\x65\x39\xdc\x7d\x1a\x1f\xb0\xe0\x8f\x2b\xfe\x8c\x93\xfe\x7f\x18\xa7\xf3\x3a\xde\xe3\x61\x0a\x07\x1e\xdc\xfa\xe1\xe0\xc7\x7b\xc6\x0f\x2c\x2c\xeb\x3c\x9e\xee\xc2\xbb\x75\x3c\xf2\x4d\xb2\x4b\x12\x7f\x3e\xf5\x26\x36\xf5\x77\x76\xc3\x16\x3f\xcc\x3f\xfe\x89\xb4\x2f\xcc\xc9\x1d\x51\x14\x8e\xed\xcc\xf6\xba\xca\xf3\x3c\xcd\x3b\xf3\x73\xb2\xb9\xfb\x14\x9e\xcc\xcb\x5b\x83\xaa\xf6\xef\xf8\x27\x04\xe1\x79\x1b\xca\xc6\xf3\xb7\x67\xef\x79\x0e\x61\x77\xbb\x64\x33\xfa\x70\xe0\xab\x5b\x73\x1a\xef\x11\x62\x33\xf3\x7a\x9e\x4f\x78\x7c\x61\xfc\x71\xdd\xbf\x41\x74\xbf\xbd\x99\xd9\x0d\xe6\xeb\x7f\xbf\x34\x5f\x7f\xbc\xd1\x4a\x42\xae\x5d\xb2\xf9\x9c\x24\x9b\x8f\x6e\x36\xdd\xd9\x1b\xcd\xa3\x49\x92\xcd\x0f\x5a\xce\xad\x19\xa7\xfd\xab\xe9\xe1\xb2\xfd\xa6\x3b\xfb\x17\xe6\xee\xd3\x2e\xd9\xf4\xf7\x6f\xae\x95\xee\x5f\xdd\x4f\x0b\x6f\x77\xc9\xff\xab\x1e\x84\xd1\xf8\xbf\x13\x88\xe7\x59\xeb\x8e\x8b\xdd\xd9\xef\xbf\x45\xe9\xdb\xdd\x0b\xec\x48\x3e\x27\xc9\x7a\x79\x60\xe3\x96\x85\x57\x40\x7e\xee\x57\x44\x09\xfd\x45\x3e\x92\xcd\x78\xf2\x93\x31\xd3\xb2\xff\xd3\x78\xcf\x6f\x4f\x7e\x7a\x3c\x17\x29\xbc\xae\x3f\x89\x10\x38\x34\x26\xd2\x98\x6c\x96\xf1\x53\x78\x1e\x4f\x6b\x5d\x26\x9b\x23\xbc\x62\x1e\x83\xfe\x75\x1a\x38\x2c\xbe\x1f\x8f\x6c\x20\x93\x3d\x7e\x21\xcf\xe1\x60\xde\x21\x56\x6c\x01\xca\x0a\x30\xa8\x86\xb6\x7e\xfc\x75\x11\xbb\xb0\x7f\xbb\x8b\xa9\x51\xcc\xe3\xd9\x7d\x38\xa9\x51\xbf\x47\x45\x4f\xa3\xa2\xc4\x2f\x44\xc5\xfe\xed\x4e\x1b\x78\x1e\x34\x1c\xd4\xa0\x68\xe4\x59\x50\x34\xfa\x85\xa0\xd8\xbf\xdd\x3d\x85\xe1\x79\xe8\x70\xfc\x31\x74\x40\xe7\x57\xd1\x47\x7f\x09\x80\x7d\x39\x09\x4e\x6e\x77\xbf\x20\xfb\x9b\x2c\x4f\xe0\x7e\xbb\xbc\x1e\xe7\x67\x69\x7e\xfa\xc0\xeb\x07\x9e\x8d\x33\xc3\x38\x73\xbf\x4e\xf3\xe5\x0b\xe9\xc2\xf9\xed\xce\x74\xd3\x74\xff\xdb\x6e\xbe\x99\x96\x3d\xfa\x44\x8e\xaf\x6e\x4d\x7a\x65\xe3\xb2\x3c\x4b\x39\x2e\x66\xb9\x2c\xff\x0b\xbe\xef\x2f\x8b\x52\xc2\xb3\x77\x3d\xff\xfc\xf9\x49\xbe\xa8\x6f\x58\xf6\x07\x9d\x70\x7f\x89\x73\xf2\xcf\x8b\xb9\x8d\xe2\xde\xde\x90\x64\x9e\xa4\xe9\x48\xd2\x86\x24\x4d\xff\xfb\x3f\xef\x49\x86\x92\xa4\xad\x49\x06\x4f\x52\xe3\xb9\x23\x29\x6b\x92\xb4\x27\xe9\xad\xae\xfb\x81\xa4\xb2\x24\x5d\x4a\x62\x99\xa4\x6c\x48\xf2\x92\xa4\x6b\x48\xda\x94\x64\xe8\x49\xd2\x81\x64\x40\x2e\x4f\x62\x1b\x92\x32\x27\xe1\x54\xf7\x65\x1d\x49\x51\x93\xb8\x92\xa4\x6a\x49\x1a\x47\x32\x38\x92\x34\x23\x29\x72\x92\xae\x24\xe9\x2b\x12\x9b\x92\xb4\x15\x49\x8e\xf3\x1d\x89\x2f\x48\xb8\x25\x29\x99\xa4\x1b\x48\xb8\x20\x19\x5a\x92\x0c\xf5\xd5\x5a\x3f\x7b\x92\xbe\x20\xe9\x5b\x92\x36\x27\xc9\x7b\x92\xa2\x25\xa9\x6a\x12\x46\xce\x4c\xf3\xb7\x8e\x84\x11\x3b\x23\xb1\x19\x49\x8f\xfa\x3b\xad\xd7\xb7\x24\xae\xd2\xbe\xb0\x2f\xef\x48\x5c\x4d\x92\xa3\xb7\x8a\xa4\xf0\xfa\x3e\x75\x24\x75\x41\xd2\xa1\x87\x8c\xa4\x8e\x18\xe2\x7c\x95\x6b\x0d\x5d\xa5\xf8\x21\x57\xc0\x07\xb5\x65\x1a\x0b\x18\xe4\x79\xc4\xa1\xd4\x78\xd8\x13\xce\x36\xca\x15\x78\xab\x99\xa4\xf2\x1a\xbb\xec\x49\x5a\xd4\xea\x15\xa3\xd2\x6b\xef\x45\xa5\x7d\xe6\x4c\xe2\x63\xcf\x57\x5e\xd1\x07\xea\x04\x9e\x03\x30\x40\xbd\x0d\x09\x97\x8a\x7b\xdb\x91\x34\xb5\xc6\x75\x38\x9f\x92\x70\x46\xc2\xac\x18\xa3\x86\x2c\xd6\x55\x0f\x24\x9d\x55\x0c\xc2\xb9\xfe\x79\x2d\x59\x4a\xd2\xa4\x24\x7d\xaa\x35\xd9\x52\xf9\x42\x3d\xe0\x05\x7a\x2a\x62\xbf\xa1\x4f\x70\xd1\x90\x14\x3d\x09\x77\x8a\x61\xc1\x24\xd6\x93\x14\x85\x9e\xcf\xad\xe2\x87\x1c\xc8\x0f\x7c\xc1\x21\x70\xef\x6b\x92\xae\x26\x69\x22\x4e\x59\xa9\xda\x40\xce\x94\x49\x9a\x42\xcf\xe4\xe8\xa3\x52\x4d\x54\x19\x89\xcb\x49\x0a\xa7\x7d\x64\x2d\x49\xdd\x93\x78\xab\x3a\x2d\x0b\x8d\x6b\x11\x1f\xcf\xa5\xea\x63\x80\x4e\xdc\x93\x98\xd0\x8b\xd5\x38\x6d\xa6\x3a\xbe\x9e\x47\xee\xaa\xd0\xfd\x16\x1a\x42\x4d\xd0\x43\xa6\xbd\xc3\x0b\x81\x47\x70\x51\x2a\x4f\xc8\x99\x15\xca\x17\xf0\x47\x6c\xe0\x51\x3a\xad\x25\xeb\x15\x83\x26\xd7\x3e\xd2\x56\xb5\xe3\x0a\xed\xa9\xe8\xb4\xde\xbc\x52\x4f\x0c\x96\xc4\xe6\x9a\x1b\x3e\x60\xf4\x0e\xfc\x5c\xf4\x41\xa1\x7a\xe4\xa8\xad\xf0\xdc\xe8\x33\xce\x76\xc0\xa4\xd3\xbf\x57\xff\xd9\xab\xaf\x59\xb5\x03\xef\x60\x2f\x38\x6b\x2d\x49\xd5\xe8\x0c\x81\x46\xdc\xa0\xbc\x94\x83\xf6\xc6\x83\xea\x10\xba\x01\x1f\xd0\x37\xb0\xa9\xa2\xe6\xd0\x0b\x74\x02\xfe\x80\x37\xb0\x44\x3d\x98\x3d\x69\xae\xfb\xe1\x3b\xe4\x70\x91\x43\xe8\x00\xbd\x41\xb7\x75\xa9\x58\xda\x42\xe7\x4a\x05\xcd\x0c\xaa\x51\xc4\x81\xe6\xc3\x5f\xa7\x98\xe6\x5e\xb9\x64\xf8\xb8\xd2\xba\x6d\x1f\x3d\x05\x9e\x2b\x8d\x9d\x3b\xd5\x6c\x91\x29\xbe\x45\x4a\x52\xc3\xef\xb9\xfa\x3e\xcc\xcb\x52\xeb\x47\x3f\x3e\x27\xf1\x71\xe6\x35\xac\x67\xa0\xb1\x8e\x95\x6f\xf4\x1f\xea\xb2\x5a\x03\x62\x71\xa3\xbf\xa1\x8f\xab\x37\x2b\x60\xd3\x6b\x0d\x58\x47\xcc\x62\x50\xdd\x64\x99\xfa\x1e\x5a\x0b\xde\x8c\xb3\x0c\xd8\xa5\xd1\x5b\x78\x3f\x0c\x3a\xb7\x81\x5d\x33\xe8\xbc\xe9\x72\xed\x2f\x68\x34\x57\x0e\xdb\xa8\x81\x3e\xea\x00\x35\xa1\x0f\x3c\x97\xd1\x47\xf0\x56\x61\x35\x17\x38\x0d\x1a\x86\x8e\x38\x6a\x37\xce\x44\x1b\xe7\x44\x36\xe8\x5d\x81\x38\xe0\xbd\x6e\xd5\xe3\xa8\x9f\x63\x5c\xf8\x1e\x98\x85\x39\x30\xe8\xcc\xa9\xa3\xce\xc2\xbd\xc0\xea\xaf\x32\xce\x0f\x60\x0c\x3f\x62\xc6\xe1\x7d\x78\x2e\x94\x83\xe0\x83\x38\x9b\xd1\x73\x98\x4b\x9d\x7a\x03\xf8\xe1\xae\x82\xcf\xe1\xa5\xae\x50\x1f\x61\x06\x83\xc3\xe0\x07\xab\xbe\x82\x4f\x8a\xa8\xe5\x32\xd5\x99\x06\x4c\x83\xf6\x30\x9f\x1a\xf5\x1a\x66\x19\xfc\x08\xef\x82\x3b\x68\x14\xef\x90\x17\x71\x82\x4f\x4b\xe5\x92\xad\xd6\x84\x5e\xe0\x03\xdc\x23\xf0\x08\xfa\xf5\x99\x72\x68\xe3\x7c\xea\xa3\x9e\x80\x7d\xdb\xab\x96\x83\xf7\xb2\x5f\x6a\x83\x0e\xc2\x5c\xaa\x95\x3b\x70\x01\x4e\xd0\x1b\xee\x30\xe4\xc0\x7d\x06\x6e\xa0\x23\xcc\x77\x78\xca\x47\xcf\x5a\xab\x18\x84\x3b\x35\xf2\x5b\x75\x7a\x3f\xdb\x6b\xfe\x4c\x67\xa2\xf3\x7a\xa7\x63\x1d\x3e\xc7\xbe\xa1\x50\x6c\xe0\xa7\xbe\x57\xbe\x9b\x78\xf7\x62\x0d\x39\xa0\xb7\xd2\xaa\x7f\x30\xbf\xaf\x73\x1d\x9c\xa2\x57\xe8\x30\x7c\x97\x00\x5b\x4b\xd2\xb4\x3a\x2f\x5d\x9c\xb5\xf8\x6e\xc0\x8c\x0d\xdf\x1a\x4d\x9c\x2f\x57\x4f\x63\xee\xe4\xaa\xb5\x30\xf3\xe0\xc9\x78\x5f\x02\x1b\xf8\x0c\x31\x51\x2b\xf0\xea\x9c\xe2\x83\xf9\x97\xb9\xf8\x9d\x11\xe7\x3b\xbe\x8b\xf0\x0e\xdf\x12\x43\xf4\x22\xee\x6e\x70\x89\xfb\xb2\x8c\xdf\x31\xf0\x3d\x38\xc5\x6c\xae\xe2\x5e\xe0\xed\x6b\xd5\x02\x3c\xe3\xe2\x3c\xc5\x1d\x8b\x1e\x51\x03\xf8\x41\x7d\xf0\x3f\xf6\x61\xa6\x42\xa7\x98\x7b\x36\xde\xd5\xc0\x37\xdc\x45\x4e\x3d\x9a\xb7\x8a\x1b\xbe\x1f\xc0\x23\x70\xf3\xac\x1e\x83\x96\x39\xfa\xea\xea\x2f\xf8\x18\x3d\x60\x0f\xf2\xe1\x6e\x80\x9f\x30\xc3\xca\xe8\xc9\xf0\xae\x57\x1d\x70\xc4\xc0\xc5\xfe\x31\x27\x70\x2e\xec\x4d\x95\x13\xec\xc5\xac\xaf\xad\x62\x6f\xff\x13\x00\x00\xff\xff\x06\xbd\xd0\xda\x00\x10\x00\x00")

func staticStaticGoBytes() ([]byte, error) {
	return bindataRead(
		_staticStaticGo,
		"static/static.go",
	)
}

func staticStaticGo() (*asset, error) {
	bytes, err := staticStaticGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/static.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1609050172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcf\x6a\xe3\x30\x10\xc6\xef\x7e\x8a\x41\xb0\x90\x90\x10\x61\x58\x36\xbb\xac\xec\x53\x6f\xed\xb5\xed\xa1\xf4\x60\x4b\x6a\xa3\x44\x9e\x31\xd2\x28\xae\x29\x7d\xf7\x62\x2b\x21\x6d\x2f\xb9\x49\x33\xbf\xef\x9b\x3f\x8c\xda\x71\xe7\xeb\x42\x45\x1d\x5c\xcf\xc0\x63\x6f\x2b\xc1\xf6\x8d\xe5\xbe\x39\x36\x39\x2a\x20\x06\x5d\x09\x19\xb9\x61\xa7\xe5\xc1\x8e\xf6\x68\x91\x37\xfb\x28\x6a\x25\x33\x73\xcd\xa2\x2e\x00\x00\x06\x87\x86\x86\x8d\x21\x9d\xba\xc9\x81\x50\x13\x4e\x68\x67\x31\x41\x05\x2f\x09\x35\x3b\x42\x58\x2c\xe1\x1d\x72\x95\x60\x39\x05\x7c\x68\x7c\xb2\x13\xd1\xf8\x68\xff\xc3\x87\x94\xc6\xc5\xa6\xf5\x16\x82\x7b\xdd\x31\x74\x94\xa2\x85\x36\x31\x13\x66\x21\x40\x71\x69\xae\x50\x2d\x99\x11\x08\x0f\x76\x34\x34\x60\x25\xb2\x2d\x10\xde\xda\xf1\x86\x06\x5c\xcc\xa2\xa5\xc8\x4c\xea\xbf\x13\xf7\xfd\x39\x9f\x07\x51\xa7\x4a\x84\xda\x3b\x7d\xa8\x44\xdc\x51\x60\x9d\x78\xf1\x54\x6e\xd7\xe5\xdf\xf5\xef\x3f\xcf\x4b\x51\x6b\x0e\x7e\xd5\x78\x5e\x19\xeb\x95\xcc\x9a\xab\x06\xff\xca\x35\x6c\x67\xf9\xa3\xc3\xd5\xdd\x4f\x5d\x38\x3d\x78\x9e\xbe\xa5\x60\x6c\xa8\x44\x79\x6a\x2c\xa7\xc2\xe5\x93\x03\xa6\xfe\x15\x95\x64\xf3\x05\x92\x67\x4a\xc9\xd9\xaa\x2e\x94\x9c\x96\x34\x2d\x4b\xce\x57\xf1\x19\x00\x00\xff\xff\xcf\xbb\xcc\xab\x1c\x02\x00\x00")

func staticTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplateHtml,
		"static/template.html",
	)
}

func staticTemplateHtml() (*asset, error) {
	bytes, err := staticTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/template.html", size: 540, mode: os.FileMode(420), modTime: time.Unix(1609049552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/keyevent.js":   staticKeyeventJs,
	"static/static.go":     staticStaticGo,
	"static/template.html": staticTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"keyevent.js":   &bintree{staticKeyeventJs, map[string]*bintree{}},
		"static.go":     &bintree{staticStaticGo, map[string]*bintree{}},
		"template.html": &bintree{staticTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
